generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(uuid())
  email             String     @unique
  username          String     @unique
  firstName         String
  lastName          String
  password          String
  createdAt         DateTime   @default(now())
  role              UserRole   @default(USER)
  updatedAt         DateTime   @updatedAt
  createdByUserId   String?
  updatedByUserId   String?
  passwordResetCode String?
  verificationCode  String?    @default(nanoid())
  verified          Boolean    @default(false)
  createdCategories Category[] @relation("Category_createdByUserIdToUser")
  updatedCategories Category[] @relation("Category_updatedByUserIdToUser")
  messages          Message[]
  createdProducts   Product[]  @relation("Product_createdByUserIdToUser")
  updatedProducts   Product[]  @relation("Product_updatedByUserIdToUser")
  sessions          Session[]
  createdByUser     User?      @relation("User_createdByUserIdToUser", fields: [createdByUserId], references: [id])
  createdUsers      User[]     @relation("User_createdByUserIdToUser")
  updatedByUser     User?      @relation("User_updatedByUserIdToUser", fields: [updatedByUserId], references: [id])
  updatedUsers      User[]     @relation("User_updatedByUserIdToUser")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  valid     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id              String     @id @default(uuid())
  name            String
  description     String
  imagePath       String
  parentId        String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  createdByUserId String?
  updatedByUserId String?
  createdByUser   User?      @relation("Category_createdByUserIdToUser", fields: [createdByUserId], references: [id])
  parent          Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryToCategory")
  updatedByUser   User?      @relation("Category_updatedByUserIdToUser", fields: [updatedByUserId], references: [id])
  Product         Product[]
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String
  imagePath       String
  price           Decimal   @db.Decimal(32, 2)
  isActive        Boolean   @default(true)
  categoryId      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdByUserId String?
  updatedByUserId String?
  category        Category? @relation(fields: [categoryId], references: [id])
  createdByUser   User?     @relation("Product_createdByUserIdToUser", fields: [createdByUserId], references: [id])
  updatedByUser   User?     @relation("Product_updatedByUserIdToUser", fields: [updatedByUserId], references: [id])

  @@index([categoryId])
}

model Tag {
  id String @id @default(uuid())

  nameTxJson        Json?
  descriptionTxJson Json?
  isActive          Boolean @default(true)
  imagePath         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  features Feature[] // implicit many-to-many relation
}

model Feature {
  id                String  @id @default(uuid())
  nameTxJson        Json?
  descriptionTxJson Json?
  isActive          Boolean @default(true)
  price             Decimal @db.Decimal(32, 2)
  imagePath         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags   Tag[] // implicit many-to-many relation
  orders Order[] // implicit many-to-many relation

  // if the filter was slow, or you need some extra fields, create a join table and replace implicit many-to-many relation 
  // with explicit many-to-many relation and name it _FeatureTag
}

model Order {
  id String @id @default(uuid())

  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  features     Feature[]
  anonymUser   AnonymUser? @relation(fields: [anonymUserId], references: [id])
  anonymUserId String?
}

model AnonymUser {
  id          String  @id @default(uuid())
  email       String  @unique
  fullName    String
  phone       String?
  companyName String?
  country     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

enum UserRole {
  SUPERUSER
  ADMIN
  USER
}
